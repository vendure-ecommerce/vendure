/* eslint-disable */
import { Controller, Res, Get } from '@nestjs/common';
import { PluginCommonModule, VendurePlugin } from '@vendure/core';
import { Response } from 'express';

import { clientToken } from '../braintree-dev-server';

/**
 * This test controller returns the Braintree drop-in checkout page
 * with the client secret generated by the dev-server
 */
@Controller()
export class BraintreeTestCheckoutController {
    @Get('checkout')
    async webhook(@Res() res: Response): Promise<void> {
        res.send(`
<head>
  <title>Checkout</title>
  <script src="https://js.braintreegateway.com/web/dropin/1.33.3/js/dropin.min.js"></script>
</head>
<html>

  <div id="dropin-container"></div>
  <button id="submit-button">Purchase</button>

<script>

    const addToOrder = {
        query: \`
            mutation AddItemToOrder($productVariantId: ID!, $quantity: Int!) {
                addItemToOrder(productVariantId: $productVariantId, quantity: $quantity) {
                    ... on Order {
                        id
                    }
                    ... on ErrorResult {
                        errorCode
                        message
                    }
                }
            }
            \`,
            variables: {
                    productVariantId: "1",
                    quantity: 1
                
            }
    };

    const transitionOrderState = {
        query: \`
            mutation TransitionOrderToState($state: String!) {
                transitionOrderToState(state: $state) {
                    ... on Order {
                        id
                    }
                    ... on ErrorResult {
                        errorCode
                        message
                    }
                }
            }
            \`,
            variables: {
                state: "ArrangingPayment",
            }
    };

    let authToken;

    const addItemToOrderResult = fetch('/shop-api', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',       
            'Credentials': 'include'                 
        },
        body: JSON.stringify(addToOrder)
    }).then(res => {
        authToken = res.headers.get('vendure-auth-token');
        return {
            result: res.json()
        }
    }).then(res => {
        transitionOrderStateToArrangingPayment();
        return res
    })

    async function transitionOrderStateToArrangingPayment() {
        const transitionOrderStateResult = await fetch('/shop-api', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',       
                'Credentials': 'include',
                'Authorization': 'Bearer '+authToken                  
            },
            body: JSON.stringify(transitionOrderState)
        }).then(res => res.json())

        console.log(transitionOrderStateResult)
    }

    
    var submitButton = document.querySelector('#submit-button');
    braintree.dropin.create({
        authorization: "${clientToken}",
        container: '#dropin-container',
        dataCollector: true,
        paypal: {
            flow: 'checkout',
            amount: 100,
            currency: 'GBP',
        },
    }, function (err, dropinInstance) {

        submitButton.addEventListener('click', function () {
        console.log("button clicked")
            dropinInstance.requestPaymentMethod(async function (err, payload) {
                const mutation = {
                    query: \`
                        mutation AddPayment($input: PaymentInput!) {
                            addPaymentToOrder(input: $input) {
                            ... on Order {
                                id
                                payments {
                                    id
                                    amount
                                    errorMessage
                                    method
                                    state
                                    transactionId
                                    createdAt
                                }
                            }
                            ... on ErrorResult {
                                errorCode
                                message
                            }
                            }
                        }
                        \`,
                        variables: {
                        input: {
                            method: "braintree-payment-method",
                            metadata: payload
                        }
                    }
                };

                const response = await fetch('/shop-api', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',       
                        'Credentials': 'include',
                        'Authorization': 'Bearer '+authToken 
                    },
                    body: JSON.stringify(mutation)
                });

                if (!response.ok) {
                    throw new Error(response.statusText);
                }

                const result = await response.json();

                console.log(result)

            });
        });

        if (dropinInstance.isPaymentMethodRequestable()) {
            // This will be true if you generated the client token
            // with a customer ID and there is a saved payment method
            // available to tokenize with that customer.
            submitButton.removeAttribute('disabled');
        }

        dropinInstance.on('paymentMethodRequestable', function (event) {
            console.log(event.type); // The type of Payment Method, e.g 'CreditCard', 'PayPalAccount'.
            console.log(event.paymentMethodIsSelected); // true if a customer has selected a payment method when paymentMethodRequestable fires

            submitButton.removeAttribute('disabled');
        });

        dropinInstance.on('noPaymentMethodRequestable', function () {
            submitButton.setAttribute('disabled', true);
        });
    });
</script>

</html>
    `);
    }
}

/**
 * Test plugin for serving the Stripe intent checkout page
 */
@VendurePlugin({
    imports: [PluginCommonModule],
    controllers: [BraintreeTestCheckoutController],
})
export class BraintreeTestPlugin {}
