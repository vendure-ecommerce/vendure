type Query {
    apiKey(id: ID!): ApiKey
    apiKeys(options: ApiKeyListOptions): ApiKeyList!
}

type Mutation {
    """
    Generates a new API-Key and attaches it to an Administrator.
    Returns the generated API-Key.
    API-Keys cannot be viewed again after creation.
    """
    createApiKey(input: CreateApiKeyInput!): CreateApiKeyResult!
    "Updates an API-Key"
    updateApiKey(input: UpdateApiKeyInput!): ApiKey!
    "Deletes an API-Key"
    deleteApiKey(input: DeleteApiKeyInput!): DeletionResponse!
}

input CreateApiKeyTranslationInput {
    languageCode: LanguageCode!

    "A descriptive name so you can remind yourself where the API-Key gets used"
    name: String!
}

input UpdateApiKeyTranslationInput {
    id: ID
    languageCode: LanguageCode!

    "A descriptive name so you can remind yourself where the API-Key gets used"
    name: String
}

type CreateApiKeyResult {
    "The generated API-Key. API-Keys cannot be viewed again after creation."
    apiKey: String!
    entity: ApiKey!
}

"""
There is no User ID because you can only create API-Keys for yourself,
which gets determined by the User who does the request.
"""
input CreateApiKeyInput {
    """
    Which roles to attach to this ApiKey.
    You may only grant roles which you, yourself have.
    """
    roleIds: [ID!]!
    # TODO we could allow an optional User parameter specifically for SuperAdmins
    translations: [CreateApiKeyTranslationInput!]!
}

input UpdateApiKeyInput {
    "ID of the ApiKey"
    id: ID!
    translations: [UpdateApiKeyTranslationInput!]
}

input DeleteApiKeyInput {
    "ID of the ApiKey. Only an Owner can delete their own Key, or SuperAdmin."
    id: ID!
}
