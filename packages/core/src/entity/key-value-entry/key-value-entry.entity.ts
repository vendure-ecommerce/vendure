import { JsonCompatible } from '@vendure/common/lib/shared-types';
import { Column, Entity, Index } from 'typeorm';

import { VendureEntity } from '../base/base.entity';

/**
 * @description
 * A key-value storage entity that supports flexible scoping mechanisms.
 * Values are stored as JSON and can be scoped globally, per-user, per-channel,
 * or with custom scoping functions.
 *
 * @docsCategory entities
 */
@Entity()
@Index('key_scope_unique', ['key', 'scope'], { unique: true })
export class KeyValueEntry extends VendureEntity {
    constructor(input?: Partial<KeyValueEntry>) {
        super(input);
    }

    /**
     * @description
     * The key for this entry. Combined with scopeKey to create unique storage.
     */
    @Index()
    @Column()
    key: string;

    /**
     * @description
     * The JSON-serialized value stored for this key.
     */
    @Column('json', { nullable: true })
    value: JsonCompatible<any> | null;

    /**
     * @description
     * The scope key generated by the scope function. Used to isolate
     * values by user, channel, or custom scoping logic.
     */
    @Index()
    @Column({ type: 'varchar', nullable: true })
    scope: string | null;
}
